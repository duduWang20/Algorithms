//
//  AlgHeap.h
//  Algorithms
//
//  Created by jufan wang on 19/6/17.
//  Copyright © 2017年 dudu. All rights reserved.
//

#import <Foundation/Foundation.h>

/*
 定义:
 n个元素序列{k1,k2...ki...kn},当且仅当满足下列关系时称之为堆：
 (ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4...n/2)
 堆（英语：Heap）是计算机科学中一类特殊的数据结构的统称。
 堆  通常是一个可以被看做  一棵树的数组对象。
*/
/*
 应用场景:
 在队列中，调度程序  反复提取队列中第一个作业  并运行，
 因为实际情况中
 某些时间较短的任务将等待很长时间才能结束，
 或者某些不短小但具有重要性的作业同样应当具有优先权。
 堆即为解决此类问题设计的一种数据结构。[1]
 
 堆(heap)又被为优先队列(priority queue)。尽管名为优先队列，但堆并不是队列。
 回忆一下，在队列中，我们可以进行的限定操作是dequeue和enqueue。
 dequeue是按照进入队列的先后顺序来取出元素。
 而在堆中，我们不是按照元素进入队列的先后顺序取出元素的，而是按照元素的优先级取出元素。
 */
/*
 性质：
 堆的实现通过构造二叉堆（binary heap），实为二叉树的一种；由于其应用的普遍性，
 当不加限定时，均指该数据结构的这种实现。这种数据结构具有以下性质。
 
 堆的一个经典的实现是完全二叉树(complete binary tree)。
 这样实现的堆成为二叉堆(binary heap)。
 完全二叉树是增加了限定条件的二叉树。假设一个二叉树的深度为n。
 为了满足完全二叉树的要求，该二叉树的前n-1层必须填满，第n层也必须按照从左到右的顺序被填满，

 
 任意节点小于（或大于）它的所有后裔，最小元（或最大元）在堆的根上（堆序性）。
 堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层尽可能地从左到右填入。
 将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等
 */

/*
 基本操作：
 操作             描述                          时间复杂度
 build          创建一个空堆                     O(n)
 insert         向堆中插入一个新元素               {\displaystyle O(\log n)} O(\log n)
 update         将新元素提升使其匹配堆的性质
 get            当前堆顶元素的值                  O(1)
 delete         删除堆顶元素                     {\displaystyle O(\log n)} O(\log n)
 heapify        使删除堆顶元素的堆再次成为堆
 
 某些堆实现还支持其他的一些操作：
    斐波那契堆支持检查一个堆中是否存在某个元素。
 
二项堆          定义，操作，实现。 ？
斐波那契堆       定义，操作，实现。 ？
Pairing堆       定义，操作，实现。 ？
 */


@interface AlgHeap : NSObject



@end


